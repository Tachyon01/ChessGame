#version 120

// Interpolated values from the vertex shaders
varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;   // Texture sampler
uniform mat4 MV;                       // Model-view matrix
uniform vec3 LightPosition_worldspace; // Light position

uniform int lightOn;
uniform float LightPower;

// New uniform for piece color
uniform vec4 pieceColor; // Add this line
uniform int specularDiffuseEnabled;

void main() {
    // Light emission properties
    vec3 LightColor = vec3(1, 1, 1);
//    float LightPower = 600.0f;
    
    // Material properties
    vec3 MaterialDiffuseColor = texture2D(myTextureSampler, UV).rgb;
    vec3 MaterialAmbientColor = vec3(0.2, 0.2, 0.2) * MaterialDiffuseColor;
    vec3 MaterialSpecularColor = vec3(0.3, 0.3, 0.3);

    // Distance to the light
    float distance = length(LightPosition_worldspace - Position_worldspace);

    // Normal of the computed fragment, in camera space
    vec3 n = normalize(Normal_cameraspace);
    // Direction of the light (from the fragment to the light)
    vec3 l = normalize(LightDirection_cameraspace);
    // Cosine of the angle between the normal and the light direction
    float cosTheta = clamp(dot(n, l), 0, 1);
    
    // Eye vector (towards the camera)
    vec3 E = normalize(EyeDirection_cameraspace);
    // Direction in which the triangle reflects the light
    vec3 R = reflect(-l, n);
    // Cosine of the angle between the Eye vector and the Reflect vector
    float cosAlpha = clamp(dot(E, R), 0, 1);
    
    // Calculate the final fragment color
    vec3 finalColor = MaterialAmbientColor;
	
	if(specularDiffuseEnabled == 1){
		finalColor += MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance);
		finalColor += MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, 5) / (distance * distance);
	}

    // Combine the texture color with the piece color
    gl_FragColor.rgb = finalColor * pieceColor.rgb; // Apply the piece color
    gl_FragColor.a = 1.0; // Set alpha to 1.0 for fully opaque
}